package de.metaphisto.buoy;import org.camunda.bpm.engine.delegate.DelegateExecution;import org.camunda.bpm.engine.delegate.ExecutionListener;import org.camunda.bpm.engine.impl.persistence.entity.ExecutionEntity;import org.slf4j.Logger;import org.slf4j.LoggerFactory;public class ExecutionPathListenerExample implements ExecutionListener {    private final Logger log = LoggerFactory.getLogger(getClass());    //Schreibt die Prozessvariablen inklusive SuperProzessen ins LOG    public void decode(ExecutionEntity executionEntity) {        do {            if (executionEntity.isConcurrent()) {                log.error("ConcurrentExecution!!!");            }            String currentActivityName = executionEntity.getCurrentActivityName();            if (currentActivityName != null) {                log.error(executionEntity.getProcessDefinitionId() + "." + currentActivityName + " " + executionEntity.getActivityId() + "{");            }            if (executionEntity.getVariableNamesLocal().size() > 0) {                String variablen = "";                for (String s : executionEntity.getVariableNamesLocal()) {                    variablen = variablen + s + " ";                }                log.error(variablen);            }            if (executionEntity.getParent() != null) {                executionEntity = executionEntity.getParent();            } else {                executionEntity = executionEntity.getSuperExecution();            }            if (currentActivityName != null) {                log.error("}");            }        } while (executionEntity != null);    }    @Override    public void notify(DelegateExecution delegateExecution) throws Exception {        decode((ExecutionEntity) delegateExecution);    }}